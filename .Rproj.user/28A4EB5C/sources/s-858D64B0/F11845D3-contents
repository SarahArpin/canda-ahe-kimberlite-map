---
title: "Canada Basemap"
subtitle: "SUBTITLE"
author: "Spencer Zeigler"
date: "Last knitted `r format(Sys.Date(), '%d %b %Y')`"
output:
  html_document: 
    df_print: paged
    number_sections: yes
    toc: yes
    toc_float: true
    toc_depth: 3
    code_folding: show
editor_options:
  chunk_output_type: console # switch to 'inline' if preferred
---

# Setup

```{r "setup", message = FALSE}
# packages
library(sf) # the base package manipulating shapes
library(rgdal) # geo data abstraction library
library(geojsonio) # geo json input and output
library(spdplyr) # the `dplyr` counterpart for shapes
library(rmapshaper) # the package that allows geo shape transformation
library(magrittr) # data wrangling
library(dplyr)
library(tidyr)
library(ggplot2) # general data wrangling and plotting

# scripts
#source("scripts/functions.R")

# global knitting options for code rendering
knitr::opts_chunk$set(
  collapse = TRUE, comment = "#>",
  dev = c("png", "pdf"),
  dev.args = list(pdf = list(encoding = "WinAnsi", useDingbats = FALSE)),
  fig.keep = "all",
  fig.path = file.path("plots", paste0(gsub("\\.[Rr]md", "", knitr::current_input()), "_"))
)
```

# Convert from .shp to geojson
```{r}
canada_raw = readOGR(dsn = "data", layer = "canada_basemap", encoding = 'latin1') # 1
canada_raw_json <- geojson_json(canada_raw) # 2
canada_raw_sim <- ms_simplify(canada_raw_json) # 3
geojson_write(canada_raw_sim, file = "data/canada_cd_sim.geojson") # 4
```

# Aesthetics 
```{r}
# Define the maps' theme -- remove axes, ticks, borders, legends, etc.
theme_map <- function(base_size=9, base_family="") { # 3
	require(grid)
	theme_bw(base_size=base_size, base_family=base_family) %+replace%
		theme(axis.line=element_blank(),
			  axis.text=element_blank(),
			  axis.ticks=element_blank(),
			  axis.title=element_blank(),
			  panel.background=element_blank(),
			  panel.border=element_blank(),
			  panel.grid=element_blank(),
			  panel.spacing=unit(0, "lines"),
			  plot.background=element_blank(),
			  legend.justification = c(0,0),
			  legend.position = c(0,0)
		)
}

# Define the filling colors for each province; max allowed is 9 but good enough for the 13 provinces + territories
map_colors <- RColorBrewer::brewer.pal(9, "Pastel1") %>% rep(37) # 4


#add to plot
# theme_map() + 
#   	theme(panel.grid.major = element_line(color = "white"),
# 		  legend.key = element_rect(color = "gray40", size = 0.1))
```

# Plotting Canada
```{r}
canada_cd <- st_read("data/canada_cd_sim.geojson", quiet = TRUE) # 1
crs_string <- "+proj=lcc +lat_1=49 +lat_2=77 +lon_0=-91.52 +x_0=0 +y_0=0 +datum=NAD83 +units=m +no_defs" # 2

#Transform from WGS84 to Lambert Conformal Conic projection
#st_crs(canada_cd) <- crs_string
#canada_cd <- st_transform(canada_cd, crs_string)

# Plot the maps
ggplot() +
	geom_sf(data = canada_cd, aes(fill = PRUID), color = "gray60", size = 0.1) + # 5
  coord_sf(crs = crs_string) + # 6
	scale_fill_manual(values = map_colors) +
	guides(fill = "none") +
	theme_bw() 

```

```{r}
pipe_coords <- readxl::read_excel("data/kimberlite_coords.xlsx")

sf_pipes = pipe_coords %>%
	select(long, lat) %>% # 1
	as.matrix() %>% # 2
	st_multipoint(dim = 'XY') %>% # 3
	st_sfc() %>% # 4
	st_set_crs(4269) # 5

#sf_pipes_t <- st_transform(sf_pipes, crs_string2)
```



```{r}
ggplot() +
  geom_sf(data = sf_pipes, color = "black", alpha = 1, size = 3) + # 17
	geom_sf(data = canada_cd, aes(fill = PRUID), color = "gray60", size = 0.1, alpha = 0.3) +
	#coord_sf(default_crs = NULL) +
	scale_fill_manual(values = map_colors) +
	guides(fill = "none") +
  theme_bw()
```











